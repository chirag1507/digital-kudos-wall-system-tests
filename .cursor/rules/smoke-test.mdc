---
description: Enforce non-negotiable standards for smoke tests in the Digital Kudos Wall System Test project
globs:
  - "digital-kudos-wall-system-tests/src/smoke/**/*"
alwaysApply: false
---

# ðŸ§ª Standard Operating Procedure: Smoke Tests

**Status:** Mandatory  
**Version:** 1.0

## Purpose and Scope

These are non-negotiable standards for implementing smoke tests in the Digital Kudos Wall project. These tests verify that the system is up and running correctly after deployment. It applies to all smoke tests in the `digital-kudos-wall-system-tests` repository.

## Core Standards

### 1. Test Coverage Requirements

Smoke tests MUST:

- Verify core system availability
- Be minimal and focused
- Complete within 2-3 minutes maximum
- Cover only critical paths
- Run before acceptance and E2E tests

Critical paths that MUST be tested:

1. Application startup and health check
2. Main page loading
3. Basic authentication flow
4. Core API endpoints health
5. External system connectivity checks

### 2. Test Implementation

#### Test Structure

```typescript
export class SystemHealthSmokeTest {
  constructor(private readonly healthDriver: HealthCheckDriver, private readonly authDriver: AuthenticationDriver) {}

  async verifySystemHealth(): Promise<void> {
    // Health check
    await this.healthDriver.checkSystemHealth();

    // Auth check
    await this.authDriver.verifyAuthFlow();
  }
}
```

#### Required Driver Interfaces

```typescript
export interface HealthCheckDriver {
  checkSystemHealth(): Promise<void>;
  checkDatabaseConnection(): Promise<void>;
  checkExternalServices(): Promise<void>;
}

export interface AuthenticationDriver {
  verifyAuthFlow(): Promise<void>;
  checkLoginPage(): Promise<void>;
  checkRegistrationPage(): Promise<void>;
}
```

### 3. Error Handling and Reporting

Error handling MUST:

- Provide clear failure messages
- Include diagnostic information
- Log relevant context
- Support debugging
- Handle timeouts gracefully

Example implementation:

```typescript
export class SmokeTestError extends Error {
  constructor(
    message: string,
    public readonly details: {
      cause: Error;
      diagnostics: DiagnosticInfo;
    }
  ) {
    super(message);
    this.name = "SmokeTestError";
  }
}
```

### 4. Execution Requirements

Smoke tests MUST:

1. Run first in the pipeline
2. Block subsequent test execution on failure
3. Complete within defined timeout
4. Run in all environments
5. Provide immediate feedback

### 5. Review Process

All smoke tests MUST be reviewed for:

1. Minimal and focused scope
2. Quick execution time
3. Critical path coverage
4. Error handling
5. Clear diagnostics

## Authority Sources

1. Clean Architecture principles
2. Continuous Deployment best practices
3. System reliability engineering practices
4. Test automation patterns

## Non-Negotiable Nature

These standards are not suggestions or preferences â€” they are non-negotiable rules that MUST be followed in all smoke test implementations. Any deviation requires explicit approval through the change management process.

## References

1. [Smoke Tests - Optivem Journal](https://journal.optivem.com/p/smoke-tests)
